// 21/07/01 = Thu

Practice Problem 2.23

Consider the following C functions:

int fun1(unsigned word)
{
  return (int)((word << 24) >> 24);
}

int fun2(unsigned word)
{
  return ((int)word << 24) >> 24;
}

Assume these are executed as a 32-bit program on a machine that uses two's-
complement arithmetic. Assume also that right shifts of signed values are
performed arithmetically, while right shifts of unsigned values are performed
logically.

A. Fill in the following table ...

    w                fun1(w)                fun2(w)
-------------------------------------------------------------
0x00000076
0x87654321
0x000000C9
0xEDCBA987

B. Describe in words the useful computation each of these function performs.

Answer:

(A)

    w                fun1(w)                fun2(w)
-------------------------------------------------------------
0x00000076           0x00000076             0x00000076
0x87654321           0x00000021             0xFFFFFF21
0x000000C9           0x000000C9             0xFFFFFFC9
0xEDCBA987           0x00000087             0xFFFFFF87

(B)

fun1() extracts the lowest-order byte of the argument. The result is an integer
in [0, 256).

fun2() extracts the lowest-order byte of the argument, but does the sign
extension at the same time. The result is an integer in [-128, 128).
