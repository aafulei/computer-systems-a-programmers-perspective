21/07/02 = Fri

Practice Problem 2.37

Practice Problem 2.37

You are given the task of patching the vulnerability in the XDR code shown in
the aside on page 100 for the case where both data types int and size_t are 32
bits. You decide to eliminate the possiblity of the multiplication overflowing
by computing the number of bytes to allocate using data type uint64_t. You
replace the original call to malloc (line 9) as follows:

uint64_t asize = ele_cnt * (uint64_t) ele_size;
void *result = malloc(asize);

Recall that the argument to malloc has type size_t.

A. Does your code provide any improvement over the original?

B. How would you change the code to eliminate the vulnerability?

Reference:

void *copy_elements(void *ele_src[], int ele_cnt, size_t ele_size)
{
  void *result = malloc(ele_cnt * ele_size);
  ...
}

Answer:

A. No. Since malloc() takes only a 32-bit size_t, passing an oversized argument
   (asize) would cause it to be truncated.

B. Check against multiplication overflow before passing the product to malloc.
   If there is an overflow, then the program should behave the same as the
   case where malloc has failed.
