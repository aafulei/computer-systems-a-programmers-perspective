21/07/02 = Fri

Practice Problem 2.44

Assume data type int is 32 bits long and uses a two's-complement representation
for signed values. Right shifts are performed arithmetically for signed values
and logically for unsigned values. The variables are declared and initialized
as follows:

    int x = foo();    // Arbitrary value
    int y = bar();    // Arbitrary value

    unsigned ux = x;
    unsigned uy = y;

For each of the following C expressions, either (1) argue that it is true
(evaluates to 1) for all values of x and y, or (2) give values of x and y for
which it is false (evaluates to 0):

A. (x > 0) || (x - 1 < 0)
B. (x & 7) != 7 || (x << 29 < 0)
C. (x * x) >= 0
D. x < 0 || -x <= 0
E. x > 0 || -x >= 0
F. x + y == uy + ux
G. x * ~y + uy * ux == -x

Answer:

A. False when x == INT_MIN (-2147483648).

B. Always true. The 3 lowest-order bits have to be 111 in order to fail
   (x & 7) != 7. In such case (x << 29) is 0xe0000000, which is negative.

C. False, for example (sqrt(INT_MAX) + 1, sqrt(INT_MAX) + 1) evaluates to
   a negative number.

D. Always true. x has to be in [0, INT_MAX] to fail (x < 0), while the
   integers in [-INT_MAX, 0] always <= 0.

E. False, undefined behavior when x == INT_MIN (can't take negation on it).

F. Always true, two's-complement and unsigned addition have the same bit-
   level behavior.

G. Always true. x * ~y + uy * ux = (int)(x * (-y - 1) + y * x) = -x
